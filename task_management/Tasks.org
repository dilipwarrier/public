#+FILE: The principles and practice of task management
#+FILETAGS: :Work:Tasks:
#+STARTUP: overview, hideallblocks

* Generation of a set of tasks with an offset from a deadline

The following block of code generates a set of TODO tasks with
appropriately scheduled dates from a table of tasks. The table should
contain a set of tasks and the offsets of time you would like the
tasks to be scheduled for. The code will then create TODO tasks in Org
format with scheduled dates that are at offset days away from
start_date (default is the date when the code is executed).

There may be an optional 3rd column. If it exists and if it is
populated for a row, then the task is created only if the text in the
field matches text in the tag.

#+NAME: test_table
| Task 1 | -1 | test_tag |
| Task 2 |    |          |
| Task 3 |  1 |          |

#+NAME: generate_tasks_from_offset
#+BEGIN_SRC python :results output raw replace drawer :var tab = test_table start_date = "" task_time="" tags = ""
  # Generate a list of tasks with scheduled dates in Org format
  #
  # Input list tab contains a list of lists of at most 3 values: name, offset and tag
  #
  # If offset is neither an integer nor blank, it is ignored
  # If it is blank, it is equivalent to 0 offset i.e.
  # the task should be scheduled on start_date.
  #
  # If the string "tag" from tab is contained in the string input "tags", then the task is
  # included, otherwise it is not.
  #
  # start_date should be a string of "YYYY-mm-dd" format or an empty string.
  # If start_date is an empty string, use today's date.

  import datetime, re

  try:
      start_date = datetime.datetime.strptime(start_date, "%Y-%m-%d").date()
  except:
      if len(start_date) == 0:
          start_date = datetime.datetime.today()
      else:
          raise Exception("Could not parse date string %s" % (start_date))

  if len(tags) > 0:
      # Add colon identifiers for tags if it is specified
      tags = ":" + ":".join(tags.split(",")) + ":"

  for t in tab:
      if not t[1]:
          delta = 0
      else:
          if re.match("[-+0-9]+", str(t[1])):
              delta = int(t[1])
          else:
              continue

      task_date = start_date + datetime.timedelta(days = delta)
      task_date_str = task_date.strftime("%Y-%m-%d %a")

      task_time_str = ""
      if (task_time):
        task_time_str = " " + task_time

      if (len(t) <= 2) or (t[2] in tags):
          print(("*** TODO %s    %s\n    SCHEDULED: " + "<" + "%s%s>") % (t[0], tags, task_date_str, task_time))
          print("   :PROPERTIES:\n   :EFFORT: 00:15\n   :BENEFIT: 10\n   :RATIO: 0.40\n   :END:\n\n")
#+END_SRC

#+RESULTS: generate_tasks_from_offset


* Possible criteria for prioritization

   One could use the Eisenhower matrix, as described below. Alternately, the
   Effective Altruism organization method for deciding what to work on may be
   useful. The criteria they use are as follows.
   - Scale
   - Solvability
   - Personal fit
   - Neglectedness

   The first two may be particularly useful for prioritizing projects
   and are basically a cost-benefit analysis.

   - Scale or Benefit :: How much potential benefit/value would this
     project bring (to you, to the family etc.) if you completed it?

   - Solvability or Cost :: How much effort/cost would this project
     take to bring to fruition?

   - Personal fit or Uniqueness :: If you didn't solve this problem,
     would someone else solve it just as well? Generally speaking, for
     work that supports poor people or underserved sections (like
     animals), there isn't a large substitution effect i.e. there
     probably aren't many people who would do the job if you
     didn't. If there is someone else who can solve the problem, you
     could consider outsourcing i.e. donate money to them so that they
     can solve it more efficiently.

   NPV analysis can be done to calculate the cost-benefit tradeoff.


* Eisenhower matrix
   :PROPERTIES:
   :CUSTOM_ID: Eisenhower_matrix
   :END:

|---------------+-------------+---------------|
|               | Urgent      | Not urgent    |
|---------------+-------------+---------------|
| Important     | Do it       | Prioritize it |
|---------------+-------------+---------------|
| Not important | Delegate it | Eliminate it  |
|---------------+-------------+---------------|


* The calculation of cost and benefit                                :Review:

In life, we may care about physical health, mental health,
contributions to community, relations with friends/family and
wealth. Each of these factors can be assigned a measure of how we feel
we are doing on that factor at a given time. A composite quality of
life measure can then be calculated from the individual measures. The
closest model to this is that of subjective well-being or [[../well_being/Positive_psychology.org::#SWB][SWB]].

The purpose of any life improvement activity, then, is to improve
that quality of life measure. It becomes the benefit of the
activity. Using some established metrics similar to [[../well_being/Positive_psychology.org::#Cost of one QALY][Cost of one QALY]],
the quality of life can be converted into a unit of
dollars. The cost of the activity can be calculated by first
measuring hours of effort spent (labor) and investments to be made
(capital) and converting those to a total cost in dollars. An NPV
calculation will then allow us to prioritize improvement
activities.


* Time efficiency calculation                                        :Review:

   You can spend 2 person-hours of effort to save 1 person-min/day of
   effort.

   Here's the reasoning.

   Assume you could save t units of time per day for the next 3
   years. That converts to roughly t*400 units per year for 3
   years. Using a 10% discount rate, your total savings is:
   t*400*[1 + (1/1.1) + (1/1.1)^2] = t*400*2.75
                                   = t*400*(11/4)
                                   ~ t*1000

   So, that's the upper bound on how much effort you should spend on that
   improvement.

   For instance, if you save 1 min/day for 3 years, you can spend up to
   1000 min or 16 hours.

   Assuming the need for a 10x gain, you get the desired result.


* Execution of task management                                       :Review:


   All this philosophy needs to be translated into an execution
   mechanism. This section describes a reasonable execution
   mechanism for tasks.

   This is heavily influenced by David Allen's "Getting Things Done"
   book.


* Tasks and projects
:PROPERTIES:
:ID:       a5b61d92-df98-46da-bfb4-cb5b948795be
:END:

First, consider projects. Projects have a defined date by which they
must be completed and a defined deliverable or goal to be
completed. The deliverable or goal and the reason for the defined date
should be explainable to someone outside the project team.

Recurring activities don't count as projects. Those should be
considered as tasks or processes.

Projects get further sub-divided into sub-tasks.

All projects or tasks should have the following properties.
- Benefit from the project (b)
- Cost of the project (fc) :: This is typically the cost of buying
  equipment, third-party costs, etc.
- Estimated labor costs left (lc)
- Number of days left to the deadline for the project (d) :: d should
  be normalized by the number of days from the creation of the project
  to the completion of the project. d can be infinity to indicate that
  the project has no deadline.

Then, the remaining benefit-to-cost ratio is b/(fc + lc).

Assume an S-function for benefit accrual.

So, incorporating benefit accrual over time, the benefit-to-cost-ratio
as a function of d is as follows.
R(d) = b*S(d)/(fc + lc)
where:
S(d) = 1 - exp(-alpha*d)


* Task management for teams                               :Review:Management:

   Software development teams typically use Jira or a similar database
   for logging software tasks or defects. We recommend that you use
   the same repository to record internal action items related to the
   project. This allows all activities to be documented in the same
   repository.

   If the task is created in a customer meeting and needs to be
   tracked with a customer, it should be maintained in a customer open
   points list. Such a list can be maintained in an appropriate
   repository. If possible, also record it as a task in the project
   Jira repository for tracking purposes.

   Even if the time required for the action item is small, we
   recommend that you record it to ensure that it gets completed. We
   suggest implementing automation to reduce the friction of creating
   action items from messaging apps/scripts etc.

   An action items should answer the question - Who does what by when?
   The "who" should only be one person. If multiple
   people do the task together, you should still have one lead person who
   will ensure that the task is completed on time. The "what" should be a clear
   deliverable that someone with superficial knowledge of the product can
   understand. The "when" should be a clear date and time.

   Each person should periodically review their action items and
   complete them on time. After completion, they should report the
   completion to the requester and mark the task as done.

   Each person should give a realistic deadline to the requester when
   asked to do a task. If an action item cannot be completed on time,
   the assignee should give the requester early notice (nominally at
   around 80% of the time from task assignment to the original
   deadline) and suggest an extension.

   Please be professional and try to complete action items as much as
   possible on time. At most, you should only need one deadline
   extension.
